<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.4//EN"
"http://www.oasis-open.org/docbook/xml/4.4/docbookx.dtd">
<chapter id="testing">
  <title>Unit Testing</title>

  <para>Just as with other application styles, it is extremely important to
  unit test any code written as part of a batch job as well. The Spring core
  documentation covers how to unit and integration test with Spring in great
  detail, so it won't be repeated here. It is important, however, to think
  about how to 'end to end' test a batch job, which is what this chapter will
  focus on. The spring-batch-test project includes classes that will help
  factillitate this end-to-end test approach.</para>

  <section>
    <title>Creating a Unit Test Class</title>

    <para>In order for the unit test to run a batch job, the framework must
    load the job's ApplicationContext. Two annotations are used to trigger
    this:</para>

    <itemizedlist>
      <listitem>
        <para><classname>@RunWith(SpringJUnit4ClassRunner.class)</classname>:
        Indicates that the class should use Spring's JUnit facilities</para>
      </listitem>

      <listitem>
        <para><classname>@ContextConfiguration(locations = {...})</classname>:
        Indicates which xml files contain the ApplicationContext.</para>
      </listitem>
    </itemizedlist>

    <programlisting>
  @RunWith(SpringJUnit4ClassRunner.class)
  @ContextConfiguration(locations = { "/simple-job-launcher-context.xml", "/jobs/skipSampleJob.xml" })
  public class SkipSampleFunctionalTests extends AbstractJobTests { ... }

</programlisting>
  </section>

  <section>
    <title>End To End Testing Batch Jobs</title>

    <para>'End To End' testing can be defined as testing the complete run of a
    batch job from beginning to end. This allows for a test that sets up a
    test condition, executes the job, and verifies the end result.</para>

    <para>In the example below, the batch job reads from the database and
    writes to a flat file. The test method begins by setting up the database
    with test data. It clears the CUSTOMER table and then inserts 10 new
    records. The test then launches the <classname>Job </classname>using the
    <methodname>launchJob()</methodname> method. The
    <methodname>launchJob</methodname>() method is provided by the
    <classname>AbstractJobTests</classname> parent class. Also provided by the
    super class is <classname>launchJob(JobParameters)</classname>, which
    allows the test to give particular parameters. The
    <methodname>launchJob()</methodname> method returns the
    <classname>JobExecution</classname> object which is useful for asserting
    particular information about the <classname>Job</classname> run. In the
    case below, the test verifies that the <classname>Job</classname> ended
    with status "COMPLETED".</para>

    <programlisting>
  @RunWith(SpringJUnit4ClassRunner.class)
  @ContextConfiguration(locations = { "/simple-job-launcher-context.xml", "/jobs/skipSampleJob.xml" })
  public class SkipSampleFunctionalTests extends AbstractJobTests {

      private SimpleJdbcTemplate simpleJdbcTemplate;

      @Autowired
      public void setDataSource(DataSource dataSource) {
          this.simpleJdbcTemplate = new SimpleJdbcTemplate(dataSource);
      }

      @Transactional
      @Test
      public void testJob() throws Exception {
          simpleJdbcTemplate.update("delete from CUSTOMER");
          for (int i = 1; i &lt;= 10; i++) {
              simpleJdbcTemplate.update("insert into CUSTOMER values (?, 0, ?, 100000)", i, "customer" + i);
          }

          JobExecution jobExecution = this.launchJob();

          Assert.assertEquals("COMPLETED", jobExecution.getExitStatus());
      }
  }

</programlisting>
  </section>

  <section>
    <title>Validating Output Files</title>

    <para>When a batch job writes to the database, it is easy to query the
    database to verify that the output is as expected. However, if the batch
    job writes to a file, it is equally important that the output be verified.
    Spring Batch provides a class <classname>AssertFile</classname> to
    facilitate the verification of output files. The method
    <methodname>assertFileEquals</methodname> takes two
    <classname>File</classname> objects (or two
    <classname>Resource</classname> objects) and asserts, line by line, that
    the two files have the same content. Therefore, it is possible to create a
    file with the expected output and to compare it to the actual
    result:</para>

    <programlisting>
  private static final String EXPECTED_FILE = "src/main/resources/data/iosample/input/multiLine.txt";
  private static final String OUTPUT_FILE = "target/test-outputs/multiLineOutput.txt";

  AssertFile.assertFileEquals(new FileSystemResource(EXPECTED_FILE), new FileSystemResource(OUTPUT_FILE));

</programlisting>
  </section>
</chapter>
