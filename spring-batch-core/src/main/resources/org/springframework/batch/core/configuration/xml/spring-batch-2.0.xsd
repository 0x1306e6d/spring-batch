<?xml version="1.0" encoding="UTF-8"?>
<xsd:schema xmlns="http://www.springframework.org/schema/batch"
	xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:beans="http://www.springframework.org/schema/beans"
	xmlns:tool="http://www.springframework.org/schema/tool"
	targetNamespace="http://www.springframework.org/schema/batch"
	elementFormDefault="qualified" attributeFormDefault="unqualified"
	version="2.0">

	<xsd:import namespace="http://www.springframework.org/schema/beans" />
	<xsd:import namespace="http://www.springframework.org/schema/tool" />

	<xsd:annotation>
		<xsd:documentation><![CDATA[
	Defines the configuration elements for Spring Batch Core.
		]]></xsd:documentation>
	</xsd:annotation>

	<xsd:element name="job">
		<xsd:annotation>
			<xsd:documentation>
				Defines a job composed of a set of steps and
				transitions between steps. The job will be exposed
				in
				the enclosing
				bean factory as a component of type Job
				that can be launched using a
				JobLauncher.
			</xsd:documentation>
		</xsd:annotation>
		<xsd:complexType>
			<xsd:complexContent>
				<xsd:extension base="flowType">
					<xsd:attribute name="id" type="xsd:ID" use="required" />
					<xsd:attributeGroup ref="jobRepository" />
					<xsd:attribute name="incrementer" type="xsd:string"
						use="optional">
						<xsd:annotation>
							<xsd:documentation><![CDATA[ 
								A reference to a JobParametersIncrementer bean definition.
								]]>
							</xsd:documentation>
							<xsd:appinfo>
								<tool:annotation kind="ref" />
								<tool:expected-type
									type="org.springframework.batch.core.JobParametersIncrementer" />
							</xsd:appinfo>
						</xsd:annotation>
					</xsd:attribute>
					<xsd:attribute name="restartable" type="xsd:string"
						default="true" use="optional">
						<xsd:annotation>
							<xsd:documentation><![CDATA[
							Whether the job should be retartable or not in case of failure.
							]]></xsd:documentation>
						</xsd:annotation>
					</xsd:attribute>
				</xsd:extension>
			</xsd:complexContent>
		</xsd:complexType>
	</xsd:element>

	<xsd:element name="job-repository">
		<xsd:annotation>
			<xsd:documentation><![CDATA[
			Configures a SimplJobRepository using a JobRepositoryFactoryBean.
			]]></xsd:documentation>
		</xsd:annotation>
		<xsd:complexType>
			<xsd:complexContent>
				<xsd:extension base="beans:identifiedType">
					<xsd:attribute name="data-source" type="xsd:string"
						default="dataSource">
						<xsd:annotation>
							<xsd:documentation source="java:javax.sql.DataSource"><![CDATA[
							The bean name of the DataSource that is to be used. This attribute 
							is not required, and only needs to be specified explicitly
							if the bean name of the desired DataSource is not 'dataSource'.
							]]></xsd:documentation>
							<xsd:appinfo>
								<tool:annotation kind="ref">
									<tool:expected-type type="javax.sql.DataSource" />
								</tool:annotation>
							</xsd:appinfo>
						</xsd:annotation>
					</xsd:attribute>
					<xsd:attributeGroup ref="transactionManager" />
					<xsd:attribute name="isolation-level-for-create"
						type="xsd:string">
						<xsd:annotation>
							<xsd:documentation><![CDATA[
							The isolation level to use for creation of job execution entities.
							The default is ISOLATION_SERIALIZABLE, which prevents accidental 
							concurrent execution of the same job (ISOLATION_REPEATABLE_READ 
							would work as well).
							]]></xsd:documentation>
						</xsd:annotation>
					</xsd:attribute>
					<xsd:attribute name="table-prefix" type="xsd:string">
						<xsd:annotation>
							<xsd:documentation><![CDATA[
							The the table prefix to use for all the batch meta-data tables.
							Defaults to "BATCH_".
							]]></xsd:documentation>
						</xsd:annotation>
					</xsd:attribute>
				</xsd:extension>
			</xsd:complexContent>
		</xsd:complexType>
	</xsd:element>

	<xsd:complexType name="flowType">
		<xsd:sequence>
			<xsd:choice minOccurs="1" maxOccurs="unbounded">
				<xsd:element name="step">
					<xsd:annotation>
						<xsd:documentation>
							Defines a stage in job processing backed by a
							Step.
							The name attribute must be specified and
							can
							match the id of
							a
							bean
							definition
							for a Step. If it does not, then you must provide
							a
							tasklet definition.
							The next
							attribute is a synonym for &lt;next on="*" .../&gt;
						</xsd:documentation>
					</xsd:annotation>
					<xsd:complexType>
						<xsd:complexContent>
							<xsd:extension base="stepType">
								<xsd:attribute name="name" type="xsd:string" use="required" >
									<xsd:annotation>
										<xsd:documentation>
										The step name attribute defines the name for the step. It can be used as 
										a reference to another bean definition where business logic is specified.
										</xsd:documentation>
									</xsd:annotation>
								</xsd:attribute>
								<xsd:attribute name="tasklet" type="xsd:string" use="optional" >
									<xsd:annotation>
										<xsd:documentation>
										The tasklet is a reference to another bean definition that defines implements the Tasklet interface.
										</xsd:documentation>
										<xsd:appinfo>
											<tool:annotation kind="ref">
												<tool:expected-type type="org.springframework.batch.core.step.tasklet.Tasklet"/>
											</tool:annotation>
										</xsd:appinfo>
									</xsd:annotation>
								</xsd:attribute>
							</xsd:extension>
						</xsd:complexContent>
					</xsd:complexType>
				</xsd:element>				
				<xsd:element name="split">
					<xsd:annotation>
						<xsd:documentation>
							Declares job should split here into two or more subflows.
						</xsd:documentation>
					</xsd:annotation>
					<xsd:complexType>
						<xsd:complexContent>
							<xsd:extension base="transitionWithNextType">
								<xsd:sequence minOccurs="2" maxOccurs="unbounded" >
									<xsd:element name="flow" type="flowType">
										<xsd:annotation><xsd:documentation>
										A subflow within a job, having the same format as a job, but without a separate identity.
										</xsd:documentation></xsd:annotation>
									</xsd:element>			
								</xsd:sequence>
								<xsd:attribute name="id" type="xsd:ID" use="required" />
							</xsd:extension>
						</xsd:complexContent>
					</xsd:complexType>
				</xsd:element>
				<xsd:element name="decision">
					<xsd:annotation>
						<xsd:documentation>
							Declares job should query a decider to determine where execution should go next.
						</xsd:documentation>
					</xsd:annotation>
					<xsd:complexType>
						<xsd:complexContent>
							<xsd:extension base="transitionType">
								<xsd:attribute name="id" type="xsd:ID" use="required" />
								<xsd:attribute name="decider" type="xsd:string" use="required" >
									<xsd:annotation>
										<xsd:documentation>							
										The decider is a reference to a JobExecutionDecider that can produce a status to base 
										the next transition on.
										</xsd:documentation>
										<xsd:appinfo>
											<tool:annotation kind="ref">
												<tool:expected-type type="org.springframework.batch.core.job.flow.JobExecutionDecider"/>
											</tool:annotation>
										</xsd:appinfo>
									</xsd:annotation>
								</xsd:attribute>
							</xsd:extension>
						</xsd:complexContent>
					</xsd:complexType>
				</xsd:element>			
			</xsd:choice>
			<xsd:element name="listeners" minOccurs="0" maxOccurs="1">
				<xsd:annotation>
					<xsd:documentation><![CDATA[
					List of all listeners for the job
					]]>
					</xsd:documentation>
				</xsd:annotation>
				<xsd:complexType>
					<xsd:sequence>
						<xsd:element name="listener" minOccurs="1"
							maxOccurs="unbounded">
							<xsd:complexType>
								<xsd:attribute name="id" type="xsd:ID" />
								<xsd:attribute name="ref" type="xsd:string">
									<xsd:annotation>
										<xsd:documentation>
										A reference to a JobExecutionListener or a POJO (with before-method / after-method).
										</xsd:documentation>
										<xsd:appinfo>
											<tool:annotation kind="ref"/>
										</xsd:appinfo>
									</xsd:annotation>
								</xsd:attribute>
								<xsd:attribute name="class" type="xsd:string">
									<xsd:annotation>
										<xsd:documentation>
										A class name used to create a listener from the default constructor.
										</xsd:documentation>
										<xsd:appinfo>
											<tool:annotation kind="direct">
												<tool:expected-type type="java.lang.Class" />
											</tool:annotation>
										</xsd:appinfo>
									</xsd:annotation>
								</xsd:attribute>
								<xsd:attribute name="before-method" type="xsd:string" />
								<xsd:attribute name="after-method" type="xsd:string" />
							</xsd:complexType>
						</xsd:element>
					</xsd:sequence>
				</xsd:complexType>
			</xsd:element>
		</xsd:sequence>
	</xsd:complexType>
	
	<xsd:complexType name="stepType">
		<xsd:complexContent>
			<xsd:extension base="nextType">
				<xsd:sequence>
					<xsd:element name="tasklet" type="taskletType" minOccurs="0" maxOccurs="1"/>
					<xsd:group ref="transitions"/>
					<xsd:element name="listeners" minOccurs="0" maxOccurs="1">
						<xsd:annotation>
							<xsd:documentation><![CDATA[
							List of all listeners for the step definition
							]]>
							</xsd:documentation>
						</xsd:annotation>
						<xsd:complexType>
							<xsd:sequence>
								<xsd:element name="listener" type="stepListenerType" minOccurs="1" maxOccurs="unbounded"/>
							</xsd:sequence>
						</xsd:complexType>
					</xsd:element>
				</xsd:sequence>
				<xsd:attributeGroup ref="jobRepository"/>
				<xsd:attributeGroup ref="transactionManager"/>
			</xsd:extension>
		</xsd:complexContent>
	</xsd:complexType>

	<xsd:complexType name="taskletType">
		<xsd:complexContent>
			<xsd:extension base="beans:identifiedType">
				<xsd:all>
					<xsd:element name="retry-listeners" minOccurs="0" maxOccurs="1">
						<xsd:annotation>
							<xsd:documentation><![CDATA[
							List of all listeners for the step definition
							]]>
							</xsd:documentation>
						</xsd:annotation>
						<xsd:complexType>
							<xsd:sequence>
								<xsd:element name="listener" type="listenerType" minOccurs="1" maxOccurs="unbounded"/>
							</xsd:sequence>
						</xsd:complexType>
					</xsd:element>
					<xsd:element name="streams" minOccurs="0" maxOccurs="1">
						<xsd:annotation>
							<xsd:documentation><![CDATA[
							List of all streams to be included for the step definition
							]]>
							</xsd:documentation>
						</xsd:annotation>
						<xsd:complexType>
							<xsd:sequence>
								<xsd:element name="stream" minOccurs="1" maxOccurs="unbounded">
									<xsd:complexType>
										<xsd:attribute name="ref" type="xsd:string">
											<xsd:annotation>
												<xsd:documentation><![CDATA[
												A reference to an ItemStream bean definition
												]]>
												</xsd:documentation>
												<xsd:appinfo>
													<tool:annotation kind="ref" />
													<tool:expected-type type="org.springframework.batch.item.ItemStream" />
												</xsd:appinfo>
											</xsd:annotation>
										</xsd:attribute>
									</xsd:complexType>
								</xsd:element>
							</xsd:sequence>
						</xsd:complexType>
					</xsd:element>
					<xsd:element name="skippable-exception-classes" minOccurs="0" maxOccurs="1">
						<xsd:annotation>
							<xsd:documentation><![CDATA[
							The newline-separated, list of exception classes that are skippable
							]]>
							</xsd:documentation>
						</xsd:annotation>
						<xsd:simpleType>
							<xsd:restriction base="xsd:string"/>
						</xsd:simpleType>
					</xsd:element>
					<xsd:element name="retryable-exception-classes" minOccurs="0" maxOccurs="1">
						<xsd:annotation>
							<xsd:documentation><![CDATA[
							The newline-separated, list of exception classes that are skippable
							]]>
							</xsd:documentation>
						</xsd:annotation>
						<xsd:simpleType>
							<xsd:restriction base="xsd:string"/>
						</xsd:simpleType>
					</xsd:element>
					<xsd:element name="fatal-exception-classes" minOccurs="0" maxOccurs="1">
						<xsd:annotation>
							<xsd:documentation><![CDATA[
							The newline-separated, list of exception classes that are skippable
							]]>
							</xsd:documentation>
						</xsd:annotation>
						<xsd:simpleType>
							<xsd:restriction base="xsd:string"/>
						</xsd:simpleType>
					</xsd:element>
				</xsd:all>
				<xsd:attribute name="commit-interval" type="xsd:string" use="required">
					<xsd:annotation>
						<xsd:documentation><![CDATA[
						The number of items that will be processed before commit is called for the transaction.
						]]></xsd:documentation>
					</xsd:annotation>
				</xsd:attribute>
				<xsd:attribute name="reader" type="xsd:string" use="required">
					<xsd:annotation>
						<xsd:documentation><![CDATA[
						The bean name of the item reader that is to be used for the process.
						]]></xsd:documentation>
						<xsd:appinfo>
							<tool:annotation kind="ref" />
							<tool:expected-type type="org.springframework.batch.item.ItemReader" />
						</xsd:appinfo>
					</xsd:annotation>
				</xsd:attribute>
				<xsd:attribute name="processor" type="xsd:string" use="optional">
					<xsd:annotation>
						<xsd:documentation><![CDATA[
						The bean name of the item processor that is to be used for the process.
						]]></xsd:documentation>
						<xsd:appinfo>
							<tool:annotation kind="ref" />
							<tool:expected-type type="org.springframework.batch.item.ItemProcessor" />
						</xsd:appinfo>
					</xsd:annotation>
				</xsd:attribute>
				<xsd:attribute name="writer" type="xsd:string" use="required">
					<xsd:annotation>
						<xsd:documentation><![CDATA[
						The bean name of the item writer that is to be used for the process.
						]]></xsd:documentation>
						<xsd:appinfo>
							<tool:annotation kind="ref" />
							<tool:expected-type type="org.springframework.batch.item.ItemWriter" />
						</xsd:appinfo>
					</xsd:annotation>
				</xsd:attribute>
				<xsd:attribute name="start-limit" type="xsd:string" use="optional">
					<xsd:annotation>
						<xsd:documentation><![CDATA[
						The maximum number of times a Step may be started.
						]]></xsd:documentation>
					</xsd:annotation>
				</xsd:attribute>
				<xsd:attribute name="allow-start-if-complete" type="xsd:string" use="optional">
					<xsd:annotation>
						<xsd:documentation><![CDATA[
						Set to true to allow a step to be started even if it is already complete.
						]]></xsd:documentation>
					</xsd:annotation>
				</xsd:attribute>
				<xsd:attribute name="skip-limit" type="xsd:string" use="optional">
					<xsd:annotation>
						<xsd:documentation><![CDATA[
						The maximum number of items that will be allowed to be skipped.
						]]></xsd:documentation>
					</xsd:annotation>
				</xsd:attribute>
				<xsd:attribute name="retry-limit" type="xsd:string" use="optional">
					<xsd:annotation>
						<xsd:documentation><![CDATA[
						The maximum number of times the processing of an item will be retried.
						]]></xsd:documentation>
					</xsd:annotation>
				</xsd:attribute>
				<xsd:attribute name="cache-capacity" type="xsd:string" use="optional">
					<xsd:annotation>
						<xsd:documentation><![CDATA[
						The capacity of the cache in the retry policy.
						]]></xsd:documentation>
					</xsd:annotation>
				</xsd:attribute>
				<xsd:attribute name="transaction-attribute" type="xsd:string" use="optional">
					<xsd:annotation>
						<xsd:documentation><![CDATA[
						The transaction attributes to be used for the transaction used during the execution
						of the task within the step.
						]]></xsd:documentation>
					</xsd:annotation>
				</xsd:attribute>
				<xsd:attribute name="is-reader-transactional-queue" type="xsd:string" default="false" use="optional">
					<xsd:annotation>
						<xsd:documentation><![CDATA[
						Whether the reader is a transactional queue. If it is then items read should not be cached 
						in the event of a rollback since they will be returned to the queue.
						]]></xsd:documentation>
					</xsd:annotation>
				</xsd:attribute>
				<xsd:attribute name="task-executor" type="xsd:string" use="optional">
					<xsd:annotation>
						<xsd:documentation
							source="java:org.springframework.core.task.TaskExecutor"><![CDATA[
						The task executor responsible for executing the task..
						]]></xsd:documentation>
						<xsd:appinfo>
							<tool:annotation kind="ref">
								<tool:expected-type
									type="org.springframework.core.task.TaskExecutor" />
							</tool:annotation>
						</xsd:appinfo>
					</xsd:annotation>
				</xsd:attribute>
			</xsd:extension>
		</xsd:complexContent>
	</xsd:complexType>

	<xsd:complexType name="nextType">
		<xsd:attribute name="next" type="xsd:string" use="optional" >
			<xsd:annotation>
				<xsd:documentation><![CDATA[
				A shortcut for specifying the next step to execute after this one, if there is only one choice.  
				If this attribute is specified, then there should be no other transition with a nested &lt;next on="*" .../&gt;]]>
				</xsd:documentation>
			</xsd:annotation>
		</xsd:attribute>
	</xsd:complexType>

	<xsd:complexType name="transitionType">
		<xsd:group ref="transitions"/>
	</xsd:complexType>

	<xsd:complexType name="transitionWithNextType">
		<xsd:complexContent>
			<xsd:extension base="nextType">
				<xsd:group ref="transitions"/>
			</xsd:extension>
		</xsd:complexContent>
	</xsd:complexType>

	<xsd:complexType name="listenerType">
		<xsd:attribute name="id" type="xsd:ID"/>
		<xsd:attribute name="ref" type="xsd:string"/>
		<xsd:attribute name="class" type="xsd:string"/>
	</xsd:complexType>
	
	<xsd:complexType name="stepListenerType">
		<xsd:attribute name="id" type="xsd:ID"/>
		<xsd:attribute name="ref" type="xsd:string">
			<xsd:annotation>
				<xsd:documentation><![CDATA[
				A bean definition for a step listener (or POJO if using *-method attributes)
				]]></xsd:documentation>
				<xsd:appinfo>
					<tool:annotation kind="ref"/>
				</xsd:appinfo>
			</xsd:annotation>
		</xsd:attribute>
		<xsd:attribute name="class" type="xsd:string">
			<xsd:annotation>
				<xsd:documentation>
				A class name used to create a StepListener from the default constructor.  If the class
				does not implement StepListener then a *-method attribute must be provided. 
				</xsd:documentation>
				<xsd:appinfo>
					<tool:annotation kind="direct">
						<tool:expected-type type="java.lang.Class" />
					</tool:annotation>
				</xsd:appinfo>
			</xsd:annotation>
		</xsd:attribute>
		<xsd:attribute name="before-step-method" type="xsd:string"/>
		<xsd:attribute name="after-step-method" type="xsd:string"/>
		<xsd:attribute name="before-chunk-method" type="xsd:string"/>
		<xsd:attribute name="after-chunk-method" type="xsd:string"/>
		<xsd:attribute name="before-read-method" type="xsd:string"/>
		<xsd:attribute name="after-read-method" type="xsd:string"/>
		<xsd:attribute name="on-read-error-method" type="xsd:string"/>
		<xsd:attribute name="before-process-method" type="xsd:string"/>
		<xsd:attribute name="after-process-method" type="xsd:string"/>
		<xsd:attribute name="on-process-error-method" type="xsd:string"/>
		<xsd:attribute name="before-write-method" type="xsd:string"/>
		<xsd:attribute name="after-write-method" type="xsd:string"/>
		<xsd:attribute name="on-write-error-method" type="xsd:string"/>
		<xsd:attribute name="on-skip-in-read-method" type="xsd:string"/>
		<xsd:attribute name="on-skip-in-process-method" type="xsd:string"/>
		<xsd:attribute name="on-skip-in-write-method" type="xsd:string"/>
	</xsd:complexType>

	<xsd:complexType name="jobExecutionListenerType">
		<xsd:attribute name="before-method" type="xsd:string"/>
		<xsd:attribute name="after-method" type="xsd:string"/>
		<xsd:attribute name="ref" type="xsd:string" use="required">
			<xsd:annotation>
				<xsd:documentation><![CDATA[
				A bean definition for a job listener (or POJO if using *-method attributes)
				]]></xsd:documentation>
				<xsd:appinfo>
					<tool:annotation kind="ref"/>
				</xsd:appinfo>
			</xsd:annotation>
		</xsd:attribute>
		
	</xsd:complexType>

	<xsd:group name="transitions">
		<xsd:sequence>
			<xsd:choice minOccurs="0" maxOccurs="unbounded" >
				<xsd:element name="next">
					<xsd:annotation>
						<xsd:documentation>
							Defines a step transition from this step to the
							next one depending on the value of the exit status.
						</xsd:documentation>
					</xsd:annotation>
					<xsd:complexType>
						<xsd:attribute name="on" type="xsd:string" use="required">
							<xsd:annotation>
								<xsd:documentation>A pattern to match against the exit status
									code. Use * and ? as wildcard characters. When a step finishes the
									most
									specific match will be chosen to select the next step. Hint:
									always
									include a default transition with on=&quot;*&quot;.</xsd:documentation>
							</xsd:annotation></xsd:attribute>
						<xsd:attribute name="to" type="xsd:string" use="required" >
							<xsd:annotation>
								<xsd:documentation>
									The name of the step to go to next.  Must resolve to one of the other steps in this job.
								</xsd:documentation>
							</xsd:annotation>
						</xsd:attribute>
					</xsd:complexType>
				</xsd:element>		
				<xsd:element name="stop">
					<xsd:annotation>
						<xsd:documentation>
							Declares job should be stop at this point and provides pointer where execution should continue.
						</xsd:documentation>
					</xsd:annotation>
					<xsd:complexType>
						<xsd:attribute name="on" type="xsd:string" use="required" >
							<xsd:annotation>
								<xsd:documentation>A pattern to match against the exit status code.  Use * and ? as wildcard characters. 
								When a step finishes the most specific match will be chosen to select the next step. 
								Hint: always include a default transition with on=&quot;*&quot;.</xsd:documentation>
							</xsd:annotation></xsd:attribute>
						<xsd:attribute name="to" type="xsd:string" use="required" >
							<xsd:annotation>
								<xsd:documentation>The name of the step to go to next.  
								Must resolve to one of the other steps in this job.</xsd:documentation>
							</xsd:annotation>
						</xsd:attribute>
					</xsd:complexType>		
				</xsd:element>		
				<xsd:element name="end">
					<xsd:annotation>
						<xsd:documentation>
							Declares job should be stop at this point and provides optional pointer where execution should continue.
						</xsd:documentation>
					</xsd:annotation>
					<xsd:complexType>
						<xsd:attribute name="on" type="xsd:string" use="required" >
							<xsd:annotation>
								<xsd:documentation>A pattern to match against the exit status code.  Use * and ? as wildcard characters. 
								When a step finishes the most specific match will be chosen to select the next step. 
								Hint: always include a default transition with on=&quot;*&quot;.</xsd:documentation>
							</xsd:annotation>
						</xsd:attribute>
						<xsd:attribute name="status" use="optional" default="COMPLETED">
							<xsd:annotation>
								<xsd:documentation>The BatchStatus value to end on, defaults to COMPLETED.</xsd:documentation>
							</xsd:annotation>
							<xsd:simpleType>
								<xsd:restriction base="xsd:string">
									<xsd:enumeration value="COMPLETED"/>
									<xsd:enumeration value="FAILED"/>
									<xsd:enumeration value="STOPPED"/>
								</xsd:restriction>
							</xsd:simpleType>
						</xsd:attribute>
					</xsd:complexType>		
				</xsd:element>			
			</xsd:choice>
		</xsd:sequence>
	</xsd:group>
	
	<xsd:attributeGroup name="jobRepository">
		<xsd:attribute name="job-repository" type="xsd:string"
			default="jobRepository">
			<xsd:annotation>
				<xsd:documentation
					source="java:org.springframework.batch.core.repository.JobRepository"><![CDATA[
				The bean name of the JobRepository that is to be used. This attribute 
				is not required, and only needs to be specified explicitly
				if the bean name of the desired JobRepository is not 'jobRepository'.
				]]></xsd:documentation>
				<xsd:appinfo>
					<tool:annotation kind="ref">
						<tool:expected-type
							type="org.springframework.batch.core.repository.JobRepository" />
					</tool:annotation>
				</xsd:appinfo>
			</xsd:annotation>
		</xsd:attribute>
	</xsd:attributeGroup>

	<xsd:attributeGroup name="transactionManager">
		<xsd:attribute name="transaction-manager" type="xsd:string"
			default="transactionManager">
			<xsd:annotation>
				<xsd:documentation
					source="java:org.springframework.transaction.PlatformTransactionManager"><![CDATA[
				The bean name of the TransactionManager that is to be used. This attribute 
				is not required, and only needs to be specified explicitly
				if the bean name of the desired TransactionManager is not 'transactionManager'.
				]]></xsd:documentation>
				<xsd:appinfo>
					<tool:annotation kind="ref">
						<tool:expected-type
							type="org.springframework.transaction.PlatformTransactionManager" />
					</tool:annotation>
				</xsd:appinfo>
			</xsd:annotation>
		</xsd:attribute>
	</xsd:attributeGroup>

</xsd:schema>